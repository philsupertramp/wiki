{"componentChunkName":"component---src-templates-post-jsx","path":"/learning-react-js-the-hard-way-part-4","result":{"data":{"markdownRemark":{"html":"<p>Hey there pal,<br>\nanother week another episode of by story on how I learned React(JS) the hard way. Since I never said that before and\nreally want to clarify some things, a short passage before the real article begins.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>The following post contains code, which is tested by myself. If you intend to use this piece of software\nfeel free to do so. Please be aware that this is by far not production ready and should be reviewed by a person with an\nadvanced knowledge of JavaScript. I don't claim to have this knowledge, neither do I want to transfer you knowledge on how\nto write a specific program nor is this a \"How to JavaScript 101\". I intend to tell you a personal and hopefully interesting\nstory of my life. And I want to prevent people doing the same mistakes I did.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>One of my biggest problems from the beginning was to decide between packages. I started reading a\nhuge pile of blog posts about which package should be used in what some kind of case, but mostly it is opinion based. What I did not know was the fact that there\ncould be packages which are better to use on frontend and packages you should definitely not use in your\nfrontend application. Sucks, huh? I was searching for an extended Date API. As mentioned in my previous <a href=\"/blog/learn-react-js-the-hard-way-part-3\">blog\npost</a> each of my applications depends on calculating a bunch of dates in different\nunits. For example adding 2 years to a date, or to determine if a user is above 18 or not. Basically\nall that stuff we learned in elementary school. But not for computers since they know how to use logical and\nmathematical operators by themselves they decided to drop out of school.</p>\n<div><img src=\"https://media.giphy.com/media/l2JdW2IDm9XCwpfRS/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<p>Since I was under a bit of time pressure and needed to get things done fast, I decided to check out several libraries.\n<em>Keep in mind that I started this app literally from zero. No knowledge about how this new JS works and how to use it\nproperly.</em> And got stuck at some fancy ass library called <a href=\"https://moment.org\">moment-js</a>. Spoiler alert, this is a huge\nlibrary and it is able to do way more stuff than I needed. My thoughts about that tended to be super positive. I mean c'mon\nit's better to have what you don't need than needing something and don't have, right?</p>\n<h3 id=\"the-downside\" style=\"position:relative;\"><a href=\"#the-downside\" aria-label=\"the downside permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The downside</h3>\n<p>React is designed to serve a client rendered single page application.<br>\n... Can't you see it coming?</p>\n<div><img src=\"https://media.giphy.com/media/GpFxyI3AIk8es/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<p>Turns out that sending big packages to your client is not so nice as you think!</p>\n<p>I guess some people are thinking right now</p>\n<blockquote>\n<p>Why do you stick with a library that does not fulfill your requirements?</p>\n</blockquote>\n<p>Imagine the following scenario:<br>\nSince you are super interested in airplanes you decide to travel on your next vacation by plane,\nit turns out that you're the only person taking that particular flight, but the\nairline is using an AirBus A380, \"Just for you\".</p>\n<p>Side facts:<br>\nIf you deny using this aircraft because of the fact that this aircraft is way too big just for one person,\nyou would need to try to take the next airplane with a 99.9% chance of <strong>not</strong> getting a seat, because this flight is already overbooked.\nBasically you would miss your holiday.</p>\n<p>Now ask yourself these questions:\nWould you deny your flight?\nOr would you maybe start tearing apart a plane during flight just because you want to know how it works?</p>\n<p>I know this scenario isn't as real as mine, I just wanted to put you in the same position in which I was not that long ago.</p>\n<blockquote>\n<blockquote>\n<p>For those of you who read since <a href=\"/blog/learing-react-js-the-hard-way-part-1\">post No. 1</a>:</p>\n<blockquote>\n<p>I know I mentioned in the previous posts that I am working with next-js, so the date calculation could\ntake part during the cycle of rendering on server side. The following is just an example, which I still feel more\ncomfortable about than using a huge 3rd party package. I can test and adjust the functionality as I want. This\nphilosophy is manifested in my mind since I needed to write every single functionality of the software I created during\nassignments and tasks in university.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p>One day I came up with a plan, which is straight forward and was the first thing that came to my mind.</p>\n<blockquote>\n<p>I gotta need to replace that flagship!</p>\n</blockquote>\n<div><img src=\"https://media.giphy.com/media/g0mzdiXspEFYdH0ojf/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<p>But you can't kill what you don't know. And knowing everything about your enemy isn't bad at all. I mean how else would\nyou stalk someone if you don't know where he is, right? ┬┴┬┴┤(･_├┬┴┬┴</p>\n<h1 id=\"the-plan\" style=\"position:relative;\"><a href=\"#the-plan\" aria-label=\"the plan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The plan</h1>\n<p>Let's break it down real quick. All we need to do is</p>\n<ol>\n<li>determine used functionality</li>\n<li>create requirements</li>\n<li>start creating the small package</li>\n<li>replace only imports</li>\n<li>fix bugs</li>\n<li>be happy</li>\n</ol>\n<p>So all we need to do is replace the currently used package with a self written version just containing the required\nset of features. AWESOME!</p>\n<blockquote>\n<p>I still haven't written any piece of code with raw JS OOP</p>\n</blockquote>\n<p>First things first!</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> determine used functionality</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> create requirements</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n* Constructors:\n* - new Moment()\n* - new Moment(secondDate, one of ['DD.MM.YYYY', 'YYYY-MM-DD', 'DD.MM.YYYY HH:mm'])\n*\n* Methods:\n*   // diff between two Moment's\n* - .diff(secondDate, one of ['m', 'd', 'y', 'minute', 'second', 'millisecond']])\n*   // return in formatted string\n* - .format(one of ['YYYY-MM-DD', 'DD.MM.YYYY'])\n*   // add time unit to obj\n* - .add(number, one of ['m', 'd', 'y', 'minute', 'second', 'millisecond']])\n*   // determines if obj is valid\n* - .isValid()\n*   // getter for date units\n* - .get(one of ['m', 'd', 'y', 'minute', 'second', 'millisecond'])\n*   // explicit getter for Moment's weekday (and for real, we need to do it right!)\n* - .weekday()\n*/</span></code></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> determine used functionality</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> create requirements</li>\n</ul>\n<p>I started object oriented programming by being forced to use C++.</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Today is <strong>the</strong> day! I am finally able to announce that I miss C++.</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<div><img src=\"https://media.giphy.com/media/3o72EUYPgo7D0EXBiE/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<blockquote>\n<p>You said you don't want to bash JS anymore!</p>\n</blockquote>\n<p>True. Immutability of objects can be gained by 3rd party packages, and there are even some packages which\ngive you the ability to override operators. Like <a href=\"https://www.npmjs.com/package/immutable\">immutable</a> and\n<a href=\"https://www.npmjs.com/package/operators\">operators</a>. There're even some articles on <a href=\"http://2ality.com/2011/12/fake-operator-overloading.html\">DYI operator overriding</a>\nwhich are damn good and super helpful. But on the other hand, again you depend on 3rd party software and the knowledge of\npeople writing articles. Do we really trust them enough to ship production ready code? Do we want our customers\nto may be scammed or having a really bad experience, because the code wasn't cross platform compatible?\nI may sound like a total moron and I should give more trust in the OS community. But the fact that I keep bumping into\noutdated packages is soooo fucking annoying. For real.</p>\n<p>Anyway, today I'm gonna start with my class <code class=\"language-text\">Moment</code></p>\n<div><img src=\"https://media.giphy.com/media/t3DDmrHb2jSQE/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<p>Let's see, I know from React that there's a keyword <code class=\"language-text\">class</code>, but I also know – from reading <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_declarations\">some</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Boxing_with_prototype_and_static_methods\">articles</a>\n– that one can use <code class=\"language-text\">function</code> for classes as well. Still don't know the difference yet, so I would prefer the <code class=\"language-text\">class</code> version\nof a <strong>class</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There we go. React also introduced me to a constructor of an inherited model, which is obviously called <code class=\"language-text\">operator</code>.\nIf you inherit from another class you should add some parameter to get passed to <code class=\"language-text\">constructor</code> and \"super\"-call them, to\nexecute the parent constructor.</p>\n<div><img src=\"https://media.giphy.com/media/BdAn5S0xigpO/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<p>Since we don't inherit and want to have a base class for our purpose we can ignore that.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Okay, now we have three requirements:</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> constructor needs to accept the required parameters.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> we need either a set of constructors or a compatible constructor for multiple combinations of parameters.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> the constructor should <strong>use</strong> the parameter provided in a nice way, so operations will be fast as required.</li>\n</ul>\n<p>First task? easy.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> format</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> operator needs to accept the required parameters.</li>\n</ul>\n<div><img src=\"https://media.giphy.com/media/uMSm9Q0XQLkSQ/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<p>You wish!\nSecond task. The docs weren't saying anything about that, which feels super fucked up... <strong>BUT</strong> google revealed\nthe <a href=\"https://stackoverflow.com/a/3220903\">holy grail</a> which is basically saying one should tell the constructor\nall possible parameters, than handle each combination as needed. <strong>MANUALLY</strong>.\nAt least we stay within our DRY ideology, right?\n<del>I was even reading about a way to <a href=\"https://css-tricks.com/understanding-javascript-constructors/#article-header-id-6\">get rid of keyword <code class=\"language-text\">new</code></a>.</del> ²<br>\nAwesome, let's do it!</p>\n<p><a name=\"2019-06-09\"></a></p>\n<details style=\"background-color: #ccc; width: 100%; padding: 0.5rem\"><summary>Before revision</summary>\n<p>\n<h5 id=\"update-2019-06-09\" style=\"position:relative;\"><a href=\"#update-2019-06-09\" aria-label=\"update 2019 06 09 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Update 2019-06-09</h5>\n<p>Unfortunately the \"hack\" to replace the keyword <code class=\"language-text\">new</code> is not working as expected, hence I removed it. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// passing the needed parameters</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> format</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// using this fancy hack to replace `new`</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Moment</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Moment</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span>¹<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// handling each type by itself…</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> format <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> \n            <span class=\"token comment\">// parse date</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> format <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> \n            <span class=\"token comment\">// parse date</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> \n            <span class=\"token comment\">// parse date</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'Construction Error'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</p>\n</details>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// passing the needed parameters</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> format</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// handling each type by itself…</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> format <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> \n            <span class=\"token comment\">// parse date</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> format <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> \n            <span class=\"token comment\">// parse date</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> \n            <span class=\"token comment\">// parse date</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'Construction Error'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> we need either a set of constructors or a compatible constructor for multiple combinations of parameters.</li>\n</ul>\n<p>Wow, I even added a meme...</p>\n<blockquote>\n<p>Me: passing wrong params to Moment<br>\nMoment: CONSTRUCTION ERROR!!!!!!1!11!<div><img src=\"https://media.giphy.com/media/bLxrToqfjThYs/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div></p>\n</blockquote>\n<p>Not that bad for a first approach, one step left until we can use this rocket.\nParsing the data is probably the most important thing for a construction, just joking.\nBut for real, how to parse it in a nice way to avoid duplication and to use the data as needed?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// passing the needed parameters</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> format</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// handling each type by itself…</span>\n        <span class=\"token comment\">// create as today</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> format <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// parse date through string</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> format <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// parse date through Date object </span>\n        <span class=\"token comment\">// or number (milliseconds from `new Date().valueOf()`)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'Construction Error'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> the constructor should <strong>use</strong> the parameter provided.</li>\n</ul>\n<p>But wait, that's shit!</p>\n<div><img src=\"https://media.giphy.com/media/dfNYKfFIbI1a0/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<blockquote>\n<p>We don't use format at all, why do we even need it?</p>\n<blockquote>\n<p>It was part of the requirement, <code class=\"language-text\">moment</code>-js parses strings with a format string. I want to keep that to\nminimize the refactoring costs (even though it's almost nothing).</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>We can simplify the 2nd and 3rd statement to share one case</p>\n<blockquote>\n<p>Cheers, mate! That's some fine idea. I would also remove the test for format, since we don't care about it at all.\nAnother improvement I had in mind was to keep the raw value of a <code class=\"language-text\">Date</code> object, since we are so smart and calculate with\nmilliseconds like there's no tomorrow. Keeping the data type simple to gain performance and built-in features feels\nlike a good decision.</p>\n</blockquote>\n</blockquote>\n<p>Improvement</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Moment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// passing the needed parameters</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> format</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// handling each type by itself…</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> format <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span>\n            <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span>\n            <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> date <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">throw</span> <span class=\"token string\">'Construction Error'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// parse the value for faster operations</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div><img src=\"https://media.giphy.com/media/l2YWlvtHGTbawriU0/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<h2 id=\"dont-you-hate-me\" style=\"position:relative;\"><a href=\"#dont-you-hate-me\" aria-label=\"dont you hate me permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don't you hate me?</h2>\n<p>This series of blog posts turns out to be waaaaay bigger than expected, but I am happy every day to see this blog evolving\nand I am really excited for each visitor on my page.</p>\n<p>For all of you who are into security and the fact that even in the \"free web\" you are watched by everyone, I totally get\nthe point of protecting your own privacy. This page uses – as you can see within it's code – Google Analytics.\n(For more information check out the <a href=\"/blog/datenschutz\">privacy page</a>). Which will be\none of the topic of one of my future posts. But maybe in a way you don't know it yet. \t(̿▀̿ ̿Ĺ̯̿̿▀̿ ̿)̄</p>\n<p>Next week I will continue creating the small date library to get finally rid of 50% of the size of my app! Incredible un-zipped 200kB.</p>\n<p>Enjoy your weekend </p>\n<blockquote>\n<p>Catch you on the flip flop!</p>\n</blockquote>\n<div><img src=\"https://media.giphy.com/media/TMYtIzAY30BGg/giphy.gif\" style=\"width: 90%; margin-left: 5%;margin-bottom: 5rem\"></div>\n<p>¹: <a href=\"#2019-06-09\">Updated 2019-06-09</a></p>\n<h2 id=\"credits\" style=\"position:relative;\"><a href=\"#credits\" aria-label=\"credits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Credits</h2>\n<ul>\n<li>Title image: <a style=\"background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px\" href=\"https://unsplash.com/@jennymarvin?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Download free do whatever you want high-resolution photos from Jenny Marvin\"><span style=\"display:inline-block;padding:2px 3px\"><svg xmlns=\"http://www.w3.org/2000/svg\" style=\"height:12px;width:auto;position:relative;vertical-align:middle;top:-2px;fill:white\" viewBox=\"0 0 32 32\"><title>unsplash-logo</title><path d=\"M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z\"></path></svg></span><span style=\"display:inline-block;padding:2px 3px\">Jenny Marvin</span></a></li>\n</ul>\n<script>\n$('.gifplayer');\n$('.gifplayer').gifplayer();\n\n$gifs = $('.gif');\n\n$gifs.each(function (i, gif) {\n    $(gif).data('isPlaying', false);\n});\n\n\n$(window).scroll(function () {\n    $gifs = $('.gif');\n\n    $gifs.each(function (i, gif) {\n        $gif = $(gif);\n\n        if ($gif.visible(true)) {\n            if (!$gif.data('isPlaying')) {\n                $gif.find('.gifplayer').gifplayer('play');\n                $gif.data('isPlaying', true);\n            }\n\n            if ($gif.find('.gp-gif-element').length > 1) {\n                $gif.find('.gp-gif-element').first().remove();\n            }\n        } else {\n            if ($gif.data('isPlaying')) {\n                $gif.find('.gifplayer').gifplayer('stop');\n                $gif.data('isPlaying', false);\n                console.log('Play')\n            }\n        }\n    });\n});\n</script>","timeToRead":10,"excerpt":"Hey there pal, another week another episode of by story on how I learned React(JS) the hard way. Since I never said that before and\nreally…","frontmatter":{"title":"Learning React(JS) the hard way Part 4","cover":"/blog/images/jenny-marvin-698502-unsplash.jpg","date":"2019-06-01","category":"tech","tags":["stuff","other"],"author":"phil"},"fields":{"slug":"/learning-react-js-the-hard-way-part-4"}},"prev":{"excerpt":"A big disappointment Hey friend, A few months passed by already and I got to admit that writing the final post…","frontmatter":{"title":"The break","cover":"/blog/images/pavel-lozovikov-HYovA7yPPvI-unsplash.jpg","date":"2019-09-01"},"fields":{"slug":"/the-break"}},"next":{"excerpt":"My private package hell (The intro) Oh boy, oh boy. I hope you're as excited as I am! Here a small recap of what…","frontmatter":{"title":"Learning React(JS) the hard way Part 3","cover":"/blog/images/eli-francis-100644-unsplash.jpg","date":"2019-05-26"},"fields":{"slug":"/learning-react-js-the-hard-way-part-3"}},"authors":{"edges":[{"node":{"uid":"phil","name":"Philipp Zettl","image":"/blog/images/phil.jpg","url":"https://wiki.godesteem.de","bio":"I love to code and open source. Mostly I'm into Python but lately other languages like C++ and JavaScript became a part of my daily life."}}]}},"pageContext":{"slug":"/learning-react-js-the-hard-way-part-4","total":6,"prev":"/the-break","next":"/learning-react-js-the-hard-way-part-3"}},"staticQueryHashes":[]}